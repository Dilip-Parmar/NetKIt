//MIT License
//
//Copyright (c) 2019 Dilip-Parmar
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
import Foundation

@available (iOS 12.0, OSX 10.14, *)
extension NetKit {
    
    // MARK: - Data Request
    /// To send a request of HTTPMethod (GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, PATCH)
    /// - Parameter request: An instance of HTTPRequest class
    /// - Parameter authDetail: An instance of AuthDetail class
    /// - Parameter completionBlock: An closure of DataCompletion type
    @available (iOS 12.0, OSX 10.14, *)
    public final func send(request: HTTPRequest,
                           authDetail: AuthDetail?,
                           maxRetry: Int? = 0,
                           completionBlock: @escaping DataCompletion) -> String {
        let requestContainer = self.requestMaker?.prepareRequest(httpRequest: request,
                                                                 authDetail: authDetail,
                                                                 maxRetry: maxRetry,
                                                                 dataCompletion: completionBlock)
        return requestContainer?.requestId ?? ""
    }
    
    // MARK: - Download Request
    /// To send file download request
    /// - Parameter request: An instance of HTTPRequest class
    /// - Parameter authDetail: An instance of AuthDetail class
    /// - Parameter progressBlock: An instance of DownloadProgressBlock
    /// - Parameter completionBlock: An instance of DownloadCompletion
    @available (iOS 12.0, OSX 10.14, *)
    public final func sendDownload(request: HTTPRequest,
                                   authDetail: AuthDetail?,
                                   progressBlock: DownloadProgressBlock?,
                                   maxRetry: Int? = 0,
                                   completionBlock: @escaping DownloadCompletion) -> String {
        let requestContainer = self.requestMaker?.prepareRequest(httpRequest: request,
                                                                 authDetail: authDetail,
                                                                 progressBlock: progressBlock,
                                                                 maxRetry: maxRetry,
                                                                 downloadCompletion: completionBlock)
        return requestContainer?.requestId ?? ""
    }
    
    /// To pause a download request
    /// - Parameter taskId: taskIdentifier generated by sending a download request
    @available (iOS 12.0, OSX 10.14, *)
    public final func pauseDownloadRequestBy(taskId: String) {
        self.requestMaker?.prepareRequestForPause(taskId: taskId)
    }
    
    @available (iOS 12.0, OSX 10.14, *)
    public final func resumeDownloadRequestBy(taskId: String) {
        self.requestMaker?.prepareRequestForResume(taskId: taskId)
    }
    
    // MARK: - Upload Request
    /// To send a file upload request
    /// - Parameter request: An instance of HTTPRequest class
    /// - Parameter fileURL: URL of file to be uploaded
    /// - Parameter authDetail: An instance of AuthDetail class
    /// - Parameter progressBlock: An instance of UploadProgressBlock
    /// - Parameter completionBlock: An instance of UploadCompletion
    @available (iOS 12.0, OSX 10.14, *)
    public final func sendUpload(request: HTTPRequest,
                                 fileURL: URL,
                                 authDetail: AuthDetail?,
                                 progressBlock: UploadProgressBlock?,
                                 maxRetry: Int? = 0,
                                 completionBlock: @escaping UploadCompletion) -> String {
        let requestContainer = self.requestMaker?.prepareRequest(httpRequest: request,
                                                                 fileURL: fileURL,
                                                                 authDetail: authDetail,
                                                                 progressBlock: progressBlock,
                                                                 maxRetry: maxRetry,
                                                                 uploadCompletion: completionBlock)
        return requestContainer?.requestId ?? ""
    }
  
    /// To pause upload request
    /// - Parameter taskId: A taskIdentifier generated by sending a upload request
    @available (iOS 12.0, OSX 10.14, *)
    public final func pauseUploadRequestBy(taskId: String) {
        self.requestMaker?.prepareRequestForPause(taskId: taskId)
    }
    
    /// To pause resume request
    /// - Parameter taskId: A taskIdentifier generated by sending a upload request
    @available (iOS 12.0, OSX 10.14, *)
    public final func resumeUploadRequestBy(taskId: String) {
        self.requestMaker?.prepareRequestForResume(taskId: taskId)
    }
    
    // MARK: Cancel Request
    /// To cancel all requests of given session
    @available (iOS 12.0, OSX 10.14, *)
    public final func cancelAllRequests() {
        self.taskExecutor?.cancelAllRequests()
    }
    
    /// To get all requests of given session
    /// - Parameter completion: Array of all types of requests
    @available (iOS 12.0, OSX 10.14, *)
    public final func getAllRequests(completion: @escaping ([URLSessionTask]) -> Void) {
        self.taskExecutor?.getAllRequests(completion: completion)
    }
    
    /// To cancel a given type request.
    /// - Parameter taskId: A taskIdentifier generated during any of the call (send/download/upload)
    @available (iOS 12.0, OSX 10.14, *)
    public final func cancelRequestBy(taskId: String) {
        self.requestMaker?.prepareRequestForCancel(taskId: taskId)
    }
}
